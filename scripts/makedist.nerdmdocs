#! /bin/bash
#
# makedist:  build the package's distributions
#
# This package only provides one distribution: pdr-nerdm
#
set -e
prog=`basename $0`
execdir=`dirname $0`
[ "$execdir" = "" -o "$execdir" = "." ] && execdir=$PWD
PACKAGE_DIR=`(cd $execdir/.. > /dev/null 2>&1; pwd)`
SOURCE_DIR=$PACKAGE_DIR
alias python=python3

# Update this list with the names of the individual component names
# 
DISTNAME="nerdm-docs"

helpdir=$PACKAGE_DIR/etc/help
modeldir=$PACKAGE_DIR/model
other_docfiles="$helpdir/helpview.css $helpdir/nerdm-guide.html"
nerdm_html_body="$helpdir/nerdm-intro-body.html $helpdir/nerdm-reference-body.html $helpdir/nerdm-glossary-body.html"

# handle command line options
while [ "$1" != "" ]; do 
  case "$1" in
    --dist-dir=*)
        DIST_DIR=`echo $1 | sed -e 's/[^=]*=//'`
        ;;
    --dist-dir)
        shift
        DIST_DIR=$1
        ;;
    --source-dir=*|--dir=*)
        SOURCE_DIR=`echo $1 | sed -e 's/[^=]*=//'`
        ;;
    -d|--dir|--source-dir)
        shift
        SOURCE_DIR=$1
        ;;
    --cache-dir=*)
        CACHE_DIR=`echo $1 | sed -e 's/[^=]*=//'`
        # NOTE: CACHE_DIR is ignored
        ;;
    -c|--cache-dir)
        shift
        CACHE_DIR=$1
        # NOTE: CACHE_DIR is ignored
        ;;
    -*)
        echo "$prog: unsupported option:" $1
        false
        ;;
    *)
        echo "${prog}: Building NERDm docs with distribution name, ${1}"
        DISTNAME=$1
        true
        ;;
  esac
  shift
done

true ${DIST_DIR:=$SOURCE_DIR/dist}
BUILD_DIR=$SOURCE_DIR/dist
mkdir -p $BUILD_DIR $DIST_DIR

# set the current version.  This will inject the version into the code, if 
# needed.
#
# set -x
echo '+' scripts/setversion.sh
scripts/setversion.sh
[ -n "$PACKAGE_NAME" ] || PACKAGE_NAME=`cat VERSION | awk '{print $1}'`
version=`cat VERSION | awk '{print $2}'`
vers4fn=`echo $version | perl -pe 's#[/ \t]+#_#g'`

echo '+' PACKAGE_NAME=$PACKAGE_NAME
echo '+' version=$version

# build the components
# set -x
installdir=$BUILD_DIR/docs
mkdir -p $installdir

# export schema files
schemas="nerdm nerdm-pub"
schema_versions="0.1 0.2 0.3"
for sch in $schemas; do
    for ver in $schema_versions; do
        sfile="$modeldir/$sch-schema-$ver.json"
        if [ -f "$sfile" ]; then
            echo '+' $execdir/install_schema.sh $sfile $installdir
            $execdir/install_schema.sh $sfile $installdir
        fi
    done
done

# export context files
cp $modeldir/nerdm-schema-context.jsonld $installdir
cp $modeldir/nerdm-pub-context.jsonld $installdir
cp $modeldir/nerdm-context.jsonld $installdir

# export help schema documentation
mkdir -p $installdir/nerdm
cat $nerdm_html_body > $installdir/nerdm/nerdm-guide-body.html
for file in $other_docfiles; do
    cp $file $installdir/nerdm
done

# ENTER COMMANDS for creating the dependency file(s)
#
# A dependency file should be called DISTNAME-${version}_dep.json
pdrinst=$PACKAGE_DIR/dist/pdr/nerdm
pdrbld=$PACKAGE_DIR/python/build/lib.*
if [ -n "$PYTHONPATH" ]; then
    export PYTHONPATH=${pdrinst}:${pdrbld}:$PYTHONPATH
else
    export PYTHONPATH=${pdrinst}:${pdrbld}
fi
$execdir/record_deps.py ${DISTNAME} $version \
                        > $DIST_DIR/${DISTNAME}-${vers4fn}_dep.json

# Bundle the distribution
(cd $BUILD_DIR && tar czf $DIST_DIR/${DISTNAME}-${vers4fn}.tgz docs)

# echo ${DISTNAME}-${vers4fn}.zip


